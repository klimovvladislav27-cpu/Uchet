<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ежедневник учета финансов</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: #333;
            line-height: 1.6;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .description {
            color: #7f8c8d;
            font-size: 1.1rem;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .card h3 {
            font-size: 1rem;
            color: #7f8c8d;
            margin-bottom: 10px;
        }
        
        .card .amount {
            font-size: 1.8rem;
            font-weight: bold;
        }
        
        .income-card {
            border-left: 5px solid #2ecc71;
        }
        
        .expense-card {
            border-left: 5px solid #e74c3c;
        }
        
        .balance-card {
            border-left: 5px solid #3498db;
        }
        
        .controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        button {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
        }
        
        button:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }
        
        .delete-btn {
            background: #e74c3c;
        }
        
        .delete-btn:hover {
            background: #c0392b;
        }
        
        .add-btn {
            background: #2ecc71;
        }
        
        .add-btn:hover {
            background: #27ae60;
        }
        
        .finance-table {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            overflow-x: auto;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e1e1e1;
        }
        
        th {
            background: #3498db;
            color: white;
            font-weight: 600;
        }
        
        tr:last-child td {
            border-bottom: none;
        }
        
        tr:hover {
            background-color: #f8f9fa;
        }
        
        .editable {
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .editable:hover {
            background: #f1f1f1;
        }
        
        input, select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .positive {
            color: #2ecc71;
            font-weight: bold;
        }
        
        .negative {
            color: #e74c3c;
            font-weight: bold;
        }
        
        .income-column {
            background-color: rgba(46, 204, 113, 0.05);
        }
        
        .expense-column {
            background-color: rgba(231, 76, 60, 0.05);
        }
        
        .daily-balance-column {
            background-color: rgba(155, 89, 182, 0.05);
        }
        
        .instructions {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .instructions h2 {
            color: #2c3e50;
            margin-bottom: 15px;
        }
        
        .instructions ul {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 10px;
        }
        
        @media (max-width: 768px) {
            .controls {
                flex-direction: column;
            }
            
            th, td {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Ежедневник учета финансов</h1>
            <p class="description">Учет доходов и расходов за день с автоматическим расчетом баланса</p>
        </header>
        
        <div class="dashboard">
            <div class="card income-card">
                <h3>Общий доход</h3>
                <p class="amount" id="total-income">0 ₽</p>
            </div>
            <div class="card expense-card">
                <h3>Общие расходы</h3>
                <p class="amount" id="total-expenses">0 ₽</p>
            </div>
            <div class="card balance-card">
                <h3>Общий баланс</h3>
                <p class="amount" id="total-balance">0 ₽</p>
            </div>
        </div>
        
        <div class="controls">
            <div>
                <button class="add-btn" id="add-row">Добавить день</button>
                <button class="delete-btn" id="clear-all">Очистить все</button>
            </div>
            <div>
                <button id="export-data">Экспорт в CSV</button>
            </div>
        </div>
        
        <div class="finance-table">
            <table>
                <thead>
                    <tr>
                        <th width="20%">Дата</th>
                        <th width="20%">Описание доходов</th>
                        <th width="15%">Доходы (₽)</th>
                        <th width="20%">Описание расходов</th>
                        <th width="15%">Расходы (₽)</th>
                        <th width="15%">Дневной баланс</th>
                        <th width="10%">Действия</th>
                    </tr>
                </thead>
                <tbody id="records-body">
                    <!-- Строки будут добавляться здесь -->
                </tbody>
            </table>
        </div>
        
        <div class="instructions">
            <h2>Как пользоваться таблицей:</h2>
            <ul>
                <li>Нажмите на ячейку, чтобы отредактировать её содержимое</li>
                <li>Вводите доходы и расходы за один день в одной строке</li>
                <li>Дневной баланс рассчитывается автоматически</li>
                <li>Нажмите "Добавить день" для создания новой записи</li>
                <li>Используйте кнопку "Удалить" для удаления строки</li>
                <li>Все данные сохраняются автоматически в вашем браузере</li>
                <li>Нажмите "Экспорт в CSV" для сохранения данных в файл</li>
            </ul>
        </div>
    </div>

    <script>
        // Инициализация данных
        let records = JSON.parse(localStorage.getItem('financeRecords')) || [];
        
        // Элементы DOM
        const recordsBody = document.getElementById('records-body');
        const totalIncomeEl = document.getElementById('total-income');
        const totalExpensesEl = document.getElementById('total-expenses');
        const totalBalanceEl = document.getElementById('total-balance');
        const addRowBtn = document.getElementById('add-row');
        const clearAllBtn = document.getElementById('clear-all');
        const exportBtn = document.getElementById('export-data');
        
        // Дни недели на русском
        const daysOfWeek = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];
        
        // Установка текущей даты по умолчанию
        function getCurrentDate() {
            const today = new Date();
            const year = today.getFullYear();
            const month = String(today.getMonth() + 1).padStart(2, '0');
            const day = String(today.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
        
        // Функция для форматирования даты с днем недели
        function formatDateWithDay(dateString) {
            const date = new Date(dateString);
            const dayOfWeek = daysOfWeek[date.getDay()];
            const formattedDate = date.toLocaleDateString('ru-RU');
            return `${formattedDate} (${dayOfWeek})`;
        }
        
        // Функция для сохранения данных в localStorage
        function saveRecords() {
            localStorage.setItem('financeRecords', JSON.stringify(records));
        }
        
        // Функция для расчета итогов
        function calculateTotals() {
            let totalIncome = 0;
            let totalExpenses = 0;
            
            records.forEach(record => {
                totalIncome += parseFloat(record.income) || 0;
                totalExpenses += parseFloat(record.expense) || 0;
            });
            
            const balance = totalIncome - totalExpenses;
            
            totalIncomeEl.textContent = `${totalIncome.toLocaleString()} ₽`;
            totalExpensesEl.textContent = `${totalExpenses.toLocaleString()} ₽`;
            totalBalanceEl.textContent = `${balance.toLocaleString()} ₽`;
            
            // Изменение цвета баланса
            if (balance >= 0) {
                totalBalanceEl.className = 'amount positive';
            } else {
                totalBalanceEl.className = 'amount negative';
            }
        }
        
        // Функция для создания редактируемой ячейки
        function createEditableCell(value, type = 'text', className = '') {
            const cell = document.createElement('td');
            cell.className = `editable ${className}`;
            
            if (type === 'date') {
                cell.textContent = formatDateWithDay(value);
            } else {
                cell.textContent = value;
            }
            
            cell.addEventListener('click', function() {
                const currentValue = type === 'date' ? value : this.textContent;
                
                let input;
                if (type === 'date') {
                    input = document.createElement('input');
                    input.type = 'date';
                    input.value = currentValue;
                } else if (type === 'number') {
                    input = document.createElement('input');
                    input.type = 'number';
                    input.value = currentValue;
                    input.min = '0';
                    input.step = '0.01';
                } else {
                    input = document.createElement('input');
                    input.type = 'text';
                    input.value = currentValue;
                }
                
                this.textContent = '';
                this.appendChild(input);
                input.focus();
                
                const saveValue = () => {
                    if (type === 'date') {
                        value = input.value;
                        this.textContent = formatDateWithDay(input.value);
                    } else {
                        this.textContent = input.value;
                    }
                    updateRecord(this.parentElement.rowIndex - 1);
                };
                
                input.addEventListener('blur', saveValue);
                input.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        saveValue();
                    }
                });
            });
            
            return cell;
        }
        
        // Функция для создания ячейки с балансом (нередактируемой)
        function createBalanceCell(income, expense) {
            const cell = document.createElement('td');
            cell.className = 'daily-balance-column';
            
            const balance = (parseFloat(income) || 0) - (parseFloat(expense) || 0);
            cell.textContent = balance.toLocaleString();
            
            if (balance >= 0) {
                cell.className += ' positive';
            } else {
                cell.className += ' negative';
            }
            
            return cell;
        }
        
        // Функция для обновления записи
        function updateRecord(index) {
            const row = recordsBody.rows[index];
            
            // Получаем исходное значение даты из записи
            const originalDate = records[index].date;
            
            records[index] = {
                date: originalDate, // Сохраняем исходную дату
                incomeDescription: row.cells[1].textContent,
                income: parseFloat(row.cells[2].textContent) || 0,
                expenseDescription: row.cells[3].textContent,
                expense: parseFloat(row.cells[4].textContent) || 0
            };
            
            // Если редактировалась дата, обновляем отображение
            if (row.cells[0].querySelector('input')) {
                const newDate = row.cells[0].querySelector('input').value;
                records[index].date = newDate;
                row.cells[0].textContent = formatDateWithDay(newDate);
            }
            
            // Обновляем ячейку баланса
            row.cells[5] = createBalanceCell(records[index].income, records[index].expense);
            
            saveRecords();
            calculateTotals();
        }
        
        // Функция для отображения записей
        function displayRecords() {
            recordsBody.innerHTML = '';
            
            if (records.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = '<td colspan="7" style="text-align: center;">Нет записей. Нажмите "Добавить день" чтобы создать первую запись.</td>';
                recordsBody.appendChild(emptyRow);
                return;
            }
            
            records.forEach((record, index) => {
                const row = document.createElement('tr');
                
                // Дата с днем недели
                row.appendChild(createEditableCell(record.date, 'date'));
                
                // Описание доходов
                row.appendChild(createEditableCell(record.incomeDescription, 'text', 'income-column'));
                
                // Сумма доходов
                row.appendChild(createEditableCell(
                    record.income.toString(), 
                    'number',
                    'income-column'
                ));
                
                // Описание расходов
                row.appendChild(createEditableCell(record.expenseDescription, 'text', 'expense-column'));
                
                // Сумма расходов
                row.appendChild(createEditableCell(
                    record.expense.toString(), 
                    'number',
                    'expense-column'
                ));
                
                // Дневной баланс
                row.appendChild(createBalanceCell(record.income, record.expense));
                
                // Действия
                const actionsCell = document.createElement('td');
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Удалить';
                deleteBtn.className = 'delete-btn';
                deleteBtn.addEventListener('click', function() {
                    deleteRecord(index);
                });
                actionsCell.appendChild(deleteBtn);
                row.appendChild(actionsCell);
                
                recordsBody.appendChild(row);
            });
            
            calculateTotals();
        }
        
        // Функция для добавления новой строки
        function addNewRow() {
            const newRecord = {
                date: getCurrentDate(),
                incomeDescription: 'Описание доходов',
                income: 0,
                expenseDescription: 'Описание расходов',
                expense: 0
            };
            
            records.push(newRecord);
            saveRecords();
            displayRecords();
        }
        
        // Функция для удаления записи
        function deleteRecord(index) {
            if (confirm('Вы уверены, что хотите удалить эту запись?')) {
                records.splice(index, 1);
                saveRecords();
                displayRecords();
            }
        }
        
        // Функция для очистки всех записей
        function clearAllRecords() {
            if (confirm('Вы уверены, что хотите удалить все записи? Это действие нельзя отменить.')) {
                records = [];
                saveRecords();
                displayRecords();
            }
        }
        
        // Функция для экспорта данных
        function exportData() {
            if (records.length === 0) {
                alert('Нет данных для экспорта');
                return;
            }
            
            let csv = 'Дата,День недели,Описание доходов,Доходы,Описание расходов,Расходы,Дневной баланс\n';
            
            records.forEach(record => {
                const date = new Date(record.date);
                const dayOfWeek = daysOfWeek[date.getDay()];
                const formattedDate = date.toLocaleDateString('ru-RU');
                const dailyBalance = (parseFloat(record.income) || 0) - (parseFloat(record.expense) || 0);
                
                csv += `"${formattedDate}","${dayOfWeek}","${record.incomeDescription}","${record.income}","${record.expenseDescription}","${record.expense}","${dailyBalance}"\n`;
            });
            
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.setAttribute('href', url);
            link.setAttribute('download', 'финансовый_ежедневник.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        // Обработчики событий
        addRowBtn.addEventListener('click', addNewRow);
        clearAllBtn.addEventListener('click', clearAllRecords);
        exportBtn.addEventListener('click', exportData);
        
        // Инициализация отображения
        displayRecords();
    </script>
</body>
</html>
